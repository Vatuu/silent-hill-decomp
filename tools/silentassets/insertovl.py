import os
import re
import sys
from pathlib import Path
from argparse import ArgumentParser, FileType


def createParser():
    parser = ArgumentParser()
    parser.add_argument("--executable", "-exe", help="Path to game's executable", required=True)
    parser.add_argument("--silentFile", "-fs", help="Path to game's SILENT. file", required=True)
    parser.add_argument("--filetableFile", "-ftb", help="Path to game's file table generated by SILENTASSETS.PY", required=True)
    parser.add_argument("--buildPath", "-b", help="Path to newly build overlays", required=True)
    parser.add_argument("--outputFolder", "-o", help="Path to where the newly generated SILENT and executable file will be generated", required=True)
    return parser

def readFileTableC(args):
    parts = []
    text = ""
    fileName = False
    i = 0
    for letter in args:
        if '{' == letter or ' ' == letter:
            continue
        elif '}' == letter:
            parts.append(int(text, 0))
            return parts
        elif ',' == letter and fileName != True:
            i += 1
            if i != 4:
                parts.append(int(text, 0))
            else:
                parts.append(text)
            text = ""
            continue
        elif ',' == letter or '\'' == letter and fileName == True:
            continue
        elif '(' == letter:
            text = ""
            fileName = True
            continue
        elif ')' == letter:
            fileName = False
            continue
        text += letter
    return parts

def string2Int(string):
    intString = int(string.encode("utf-8").hex(), 16)
    return intString

def nameEncrypt(args):
    nameStr1 = ""
    nameStr2 = ""
    name1 = 0
    name2 = 0
    
    try:
        for x in range(0, 4):
            nameStr1 += args[x]
            
        for x in range(4, 8):
            nameStr2 += args[x]
    except:
        """did you know that the original script for
        Silent Hill: Revelation reveals *cough* that
        there was going to be a scene in the subways
        just like in the game however it was cut due
        budgets contraints"""
    
    if nameStr1 != "":
        var1 = string2Int(nameStr1)
    if nameStr2 != "":
        var2 = string2Int(nameStr2)
    
    x = 0
    tempName = 0
    for shift in range(4, 28, 6):
        if len(nameStr1) <= x:
            break
        if ord(nameStr1[x]) == 0:
            continue
        tempName = ord(nameStr1[x])
        tempName -= 32
        tempName &= 63
        tempName = tempName << shift
        name1 += tempName
        x += 1
    
    x = 0
    for shift in range(0, 24, 6):
        if len(nameStr2) <= x:
            break
        if ord(nameStr2[x]) == 0:
            continue
        tempName = ord(nameStr2[x])
        tempName -= 32
        tempName &= 63
        tempName = tempName << shift
        name2 += tempName
        x += 1
    
    return name1, name2

# From SILENTASSETS.PY works for both encrypting and dencrypting overlays
def EncryptionOvl(data):
    output   = bytearray(data)
    outArray = memoryview(output).cast("I") # uint32_t
    seed = 0

    for i, value in enumerate(outArray):
        seed = (seed + 0x01309125) & 0xffffffff
        seed = (seed * 0x03a452f7) & 0xffffffff
        outArray[i] ^= seed

    return output


def main():
    args = createParser().parse_args()
    
    fileTable = open(args.filetableFile)
    buildOvlPaths = [
    f"{args.buildPath}/VIN/",
    f"{args.buildPath}/1ST/"
    ]
    ovlNames = [
    "STREAM",
    "B_KONAMI",
    "STF_ROLL",
    "OPTION",
    "SAVELOAD",
    "MAP0_S00", "MAP0_S01", "MAP0_S02",
    "MAP1_S00", "MAP1_S01", "MAP1_S02", "MAP1_S03", "MAP1_S04", "MAP1_S05", "MAP1_S06",
    "MAP2_S00", "MAP2_S01", "MAP2_S02", "MAP2_S03", "MAP2_S04",
    "MAP3_S00", "MAP3_S01", "MAP3_S02", "MAP3_S03", "MAP3_S04", "MAP3_S05", "MAP3_S06",
    "MAP4_S00", "MAP4_S01", "MAP4_S02", "MAP4_S03", "MAP4_S04", "MAP4_S05", "MAP4_S06",
    "MAP5_S00", "MAP5_S01", "MAP5_S02", "MAP5_S03",
    "MAP6_S00", "MAP6_S01", "MAP6_S02", "MAP6_S03", "MAP6_S04", "MAP6_S05",
    "MAP7_S00", "MAP7_S01", "MAP7_S02", "MAP7_S03"
    ]
    
    
    
    #Get actual ovl information
    #name, size, new size, value to rest/sum to the position and index
    fileTableOvlData = []
    ogFileTable = []
    index = 0
    for x in fileTable:
        tableLine = readFileTableC(re.findall(r"\{.*?\}", x)[0])
        
        ogFileTable.append(tableLine)
        
        if tableLine[4] == 2:
            for ovl in ovlNames:
                if tableLine[3] == ovl:
                    if Path("./"+buildOvlPaths[0]+ovl+".BIN").is_file() or Path("./"+buildOvlPaths[1]+ovl+".BIN").is_file():
                        fileTableOvlData.append([ovl, tableLine[1], 0, 0, index])
        index += 1
    fileTable.close()
    
    
    #Get new overlay information
    temp1 = 0
    temp2 = 0
    for i in buildOvlPaths:
        for x in ovlNames:
            if Path("./"+i+x+".BIN").is_file():
                overlay = open(("./"+i+x+".BIN"), "rb")
                
                
                newOvlSize = overlay.seek(0, 2)
                newOvlSize = round(newOvlSize / 256)
                overlay.close()
                
                for y in fileTableOvlData:
                    if temp2 == y[4]:
                        y[3] = temp1
                        temp1 = 0
                    
                    if y[0] == x:
                        if y[1] < newOvlSize:
                            y[2] = newOvlSize
                            temp1 = (newOvlSize * 256)
                            while (temp1 % 0x800) != 0:
                                temp1 += 1
                            temp1 -= (y[1] * 256)
                            temp2 = y[4]+1
                            break
                        elif y[1] > newOvlSize:
                            y[2] = newOvlSize
                            break
                        elif y[1] == newOvlSize:
                            y[2] = newOvlSize
                            break
    
    
    # Replace's exe file table
    EXE = open(args.executable, "rb")
    tempEXE = open(args.outputFolder+"/SLUS_007.07.n", "wb")
    bytesNewTable = bytearray()
    nFileTableEncrypted = []
    sumPosVal = 0
    index = 0
    ogEXEData = EXE.read(0xB91C)
    tempEXE.write(ogEXEData)
    EXE.seek(0x6138, 1)
    for x in ogFileTable:
        tableLine = x
        
        if tableLine[4] == 2:
            for i in fileTableOvlData:
                if tableLine[3] == i[0]:
                    tableLine[1] = i[2]
                    sumPosVal += i[3]
        
        tableLine[0] = round((((tableLine[0] - 64) * 2048) + sumPosVal) / 2048) + 64
        nFileTableEncrypted.append([
        (tableLine[1] << 19) + tableLine[0],
        nameEncrypt(tableLine[3])[0] + tableLine[2],
        nameEncrypt(tableLine[3])[1] + (tableLine[4] << 24)
        ])
        
        bytesNewTable += nFileTableEncrypted[index][0].to_bytes(4, byteorder='little')
        bytesNewTable += nFileTableEncrypted[index][1].to_bytes(4, byteorder='little')
        bytesNewTable += nFileTableEncrypted[index][2].to_bytes(4, byteorder='little')
        index += 1
    
    tempEXE.write(bytesNewTable)
    
    ogEXEData = EXE.read(0x25AC)
    tempEXE.write(ogEXEData)
    
    
    
    # Write new files on SILENT     |       HILL doesn't matter as it does not
    # contain any overlay and the new file table already adjusted the file positions
    # TODO: likely this will cause a bug if the overlay is way to smaller than
    # the original one
    SILENT = open(args.silentFile, "rb")
    tempSILENT = open(args.outputFolder+"/SILENT.n", "wb")
    index = 0
    xd = 0
    for x in fileTableOvlData:
        
        copyDataSize = ((ogFileTable[x[4]][0] - 64 ) * 2048) - SILENT.tell()
        ogDataSILENT = SILENT.read(copyDataSize)
        tempSILENT.write(ogDataSILENT)
        for i in buildOvlPaths:
            if Path("./"+i+x[0]+".BIN").is_file():
                ovl = open("./"+i+x[0]+".BIN", "rb")
                ovl.seek(0, 2)
                dataOvlSize = ovl.tell()
                ovl.seek(0)
                dataOvl = ovl.read(dataOvlSize)
                ovl.close()
                if ogFileTable[x[4]][2] != 9:
                    dataOvl = EncryptionOvl(dataOvl)
                tempSILENT.write(dataOvl)
                while (dataOvlSize % 0x800) != 0:
                    dataOvlSize += 1
                    tempSILENT.write(b'\x00')
                print("./"+i+x[0]+".BIN\n")
        
        
        SILENT.seek((ogFileTable[x[4] + 1][0] - 64 ) * 2048)
    

if __name__ == "__main__":
    main()