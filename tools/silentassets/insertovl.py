import os
import re
import sys
from pathlib import Path
from argparse import ArgumentParser, FileType
from dataclasses import dataclass

@dataclass
class version:
    checksum: int
    ftOffset: int
    ftSize: int

VERSIONS = (
    version(0, 0, 0), # NTSC 1.0
    version(0, 0xB91C, 0x6138), # NTSC 1.1
    version(0, 0xB8FC, 0) # PAL
    )

def createParser():
    parser = ArgumentParser()
    parser.add_argument("--executable", "-exe", help="Path to game's executable")
    parser.add_argument("--silentFile", "-fs", help="Path to game's SILENT. file")
    parser.add_argument("--filetableFile", "-ftb", help="Path to game's file table generated by SILENTASSETS.PY")
    parser.add_argument("--xmlFile", "-xml", help="Path to new .xml file for MKPSXISO")
    parser.add_argument("--buildFolder", "-b", help="Path to build folder")
    parser.add_argument("--outputFolder", "-o", help="Path to where the newly generated SILENT and executable file will be generated")
    return parser

def readTableLine(tableLine):
    tableData = []
    text = ""
    fileName = False
    i = 0
    for letter in tableLine:
        match letter:
            case '{' | ' ':
                continue
            case ',' | '\'' | '}':
                if i != 3:
                    tableData.append(int(text, 0))
                    text = ""
                    i += 1
                elif fileName == False:
                    tableData.append(text)
                    text = ""
                    i += 1
            case '(':
                text = ""
                fileName = True
            case ')':
                fileName = False
            case _:
                text += letter
            
    return tableData

def nameObfuscate(fileName):
    nameStr1 = ""
    nameStr2 = ""
    name1 = 0
    name2 = 0
    
    try:
        for letterIndex in range(0, 4):
            nameStr1 += fileName[letterIndex]
            
        for letterIndex in range(4, 8):
            nameStr2 += fileName[letterIndex]
    except:
        """did you know that the original script for
        Silent Hill: Revelation reveals *cough* that
        there was going to be a scene in the subways
        just like in the game however it was cut due
        budgets contraints"""
        
    letterIndex = 0
    tempName = 0
    for shift in range(4, 28, 6):
        letterIndex = (shift - 4) // 6
        if len(nameStr1) <= letterIndex:
            break
        if ord(nameStr1[letterIndex]) == 0:
            continue
        tempName = ord(nameStr1[letterIndex])
        tempName -= 32
        tempName &= 63
        tempName = tempName << shift
        name1 += tempName
    
    for shift in range(0, 24, 6):
        letterIndex = shift // 6
        if len(nameStr2) <= letterIndex:
            break
        if ord(nameStr2[letterIndex]) == 0:
            continue
        tempName = ord(nameStr2[letterIndex])
        tempName -= 32
        tempName &= 63
        tempName = tempName << shift
        name2 += tempName
    
    return name1, name2

# From SILENTASSETS.PY works for both encrypting and dencrypting overlays
def ovlEncryption(data):
    output = bytearray(data)
    outArray = memoryview(output).cast("I") # uint32_t
    seed = 0

    for i, value in enumerate(outArray):
        seed = (seed + 0x01309125) & 0xffffffff
        seed = (seed * 0x03a452f7) & 0xffffffff
        outArray[i] ^= seed

    return output

def main():
    # TODO: multiple version support
    version = VERSIONS[1]
    args = createParser().parse_args()
    
    fileTable = open(args.filetableFile)
    buildOvlPaths = [
    "/VIN/",
    "/1ST/"
    ]
    ovlNames = [
    "STREAM",
    "B_KONAMI",
    "STF_ROLL",
    "OPTION",
    "SAVELOAD",
    "MAP0_S00", "MAP0_S01", "MAP0_S02",
    "MAP1_S00", "MAP1_S01", "MAP1_S02", "MAP1_S03", "MAP1_S04", "MAP1_S05", "MAP1_S06",
    "MAP2_S00", "MAP2_S01", "MAP2_S02", "MAP2_S03", "MAP2_S04",
    "MAP3_S00", "MAP3_S01", "MAP3_S02", "MAP3_S03", "MAP3_S04", "MAP3_S05", "MAP3_S06",
    "MAP4_S00", "MAP4_S01", "MAP4_S02", "MAP4_S03", "MAP4_S04", "MAP4_S05", "MAP4_S06",
    "MAP5_S00", "MAP5_S01", "MAP5_S02", "MAP5_S03",
    "MAP6_S00", "MAP6_S01", "MAP6_S02", "MAP6_S03", "MAP6_S04", "MAP6_S05",
    "MAP7_S00", "MAP7_S01", "MAP7_S02", "MAP7_S03"
    ]
    
    
    
    #Get file information from the original file table
    #name, size, new size, value to rest/sum to the position and index
    fileTableNew = []
    fileTableOrig = []
    index = 0
        
    for x in fileTable:
        tableLine = readTableLine(re.findall(r"\{.*?\}", x)[0])
        
        fileTableOrig.append(tableLine)
        
        if tableLine[4] == 2:
            for ovl in ovlNames:
                if tableLine[3] == ovl:
                    if Path(f"{args.buildFolder}{buildOvlPaths[0]}{ovl}.BIN").is_file() or Path(f"{args.buildFolder}{buildOvlPaths[1]}{ovl}.BIN").is_file():
                        fileTableNew.append([ovl, tableLine[1], 0, 0, index])
        index += 1
    fileTable.close()
    
    if fileTableOrig == []:
        print(fileTableOrig)
        print("No new overlay to insert")
        return
    
    #Get new overlay size
    newSize = 0
    nextOvl = 0
    for path in buildOvlPaths:
        for ovlName in ovlNames:
            if Path(f"{args.buildFolder}{path}{ovlName}.BIN").is_file():
                newOvl = open((f"{args.buildFolder}{path}{ovlName}.BIN"), "rb")
                newOvlSize = newOvl.seek(0, 2)
                newOvlSize = round(newOvlSize / 256)
                newOvl.close()
                
                for newFTLine in fileTableNew:
                    if nextOvl == newFTLine[4]:
                        newFTLine[3] = newSize
                        newSize = 0
                    
                    if newFTLine[0] == ovlName:
                        if newFTLine[1] < newOvlSize:
                            newFTLine[2] = newOvlSize
                            newSize = (newOvlSize * 256)
                            while (newSize % 0x800) != 0:
                                newSize += 1
                            newSize -= (newFTLine[1] * 256)
                            nextOvl = newFTLine[4]+1
                            break
                        elif newFTLine[1] >= newOvlSize:
                            newFTLine[2] = newOvlSize
                            break
    
    # Replace's exe file table
    EXE = open(args.executable, "rb")
    newEXE = open(args.outputFolder+"/new_SLUS_007.07", "wb")
    EXENewData = bytearray()
    fileTableNewEcrypted = []
    sumPos = 0
    index = 0
    EXEData = EXE.read(version.ftOffset)
    newEXE.write(EXEData)
    EXE.seek(version.ftSize, 1)
    for x in fileTableOrig:
        tableLine = x
        
        if tableLine[4] == 2:
            for tableLineNew in fileTableNew:
                if tableLine[3] == tableLineNew[0]:
                    tableLine[1] = tableLineNew[2]
                    sumPos += tableLineNew[3]
        
        tableLine[0] = round((((tableLine[0] - 64) * 2048) + sumPos) / 2048) + 64
        fileTableNewEcrypted.append([
        (tableLine[1] << 19) + tableLine[0],
        nameObfuscate(tableLine[3])[0] + tableLine[2],
        nameObfuscate(tableLine[3])[1] + (tableLine[4] << 24)
        ])
        
        EXENewData += fileTableNewEcrypted[index][0].to_bytes(4, byteorder='little')
        EXENewData += fileTableNewEcrypted[index][1].to_bytes(4, byteorder='little')
        EXENewData += fileTableNewEcrypted[index][2].to_bytes(4, byteorder='little')
        index += 1
    
    newEXE.write(EXENewData)
    
    actualPos = EXE.tell()
    EXE.seek(0, 2)
    missingData = EXE.tell() - actualPos
    EXE.seek(actualPos, 0)
    
    EXEData = EXE.read(missingData)
    newEXE.write(EXEData)
    
    
    
    # Write new files on SILENT     |       HILL doesn't matter as it does not
    # contain any overlay and the new file table already adjusted the file positions
    SILENT = open(args.silentFile, "rb")
    newSILENT = open(args.outputFolder+"/new_SILENT.", "wb")
    index = 0
    for x in fileTableNew:
        
        copyDataSize = ((fileTableOrig[x[4]][0] - 64 ) * 2048) - SILENT.tell()
        dataSILENT = SILENT.read(copyDataSize)
        newSILENT.write(dataSILENT)
        for path in buildOvlPaths:
            if Path(f"{args.buildFolder}{path}{x[0]}.BIN").is_file():
                ovl = open(f"{args.buildFolder}{path}{x[0]}.BIN", "rb")
                ovl.seek(0, 2)
                dataOvlSize = ovl.tell()
                ovl.seek(0)
                dataOvl = ovl.read(dataOvlSize)
                ovl.close()
                if fileTableOrig[x[4]][2] != 9:
                    dataOvl = ovlEncryption(dataOvl)
                newSILENT.write(dataOvl)
                while (dataOvlSize % 0x800) != 0:
                    dataOvlSize += 1
                    newSILENT.write(b'\x00')
        
        
        SILENT.seek((fileTableOrig[x[4] + 1][0] - 64 ) * 2048)
    
    with open(args.xmlFile, "r") as XML:
        with open(os.path.dirname(args.xmlFile)+"/shgame.xml", "a+") as newXML:
            newXML.truncate(0)
            for fileLine in XML:
                if "source=\"SLUS_007.07\"" in fileLine:
                    newXML.write(fileLine.replace("source=\"SLUS_007.07\"", "source=\"new_SLUS_007.07\""))
                elif "source=\"SILENT.\"" in fileLine:
                    newXML.write(fileLine.replace("source=\"SILENT.\"", "source=\"new_SILENT.\""))
                elif "source=\"SILENT\"" in fileLine:
                    newXML.write(fileLine.replace("source=\"SILENT\"", "source=\"new_SILENT\""))
                else:
                    newXML.write(fileLine)
    

if __name__ == "__main__":
    main()